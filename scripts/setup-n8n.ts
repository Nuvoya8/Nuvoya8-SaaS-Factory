#!/usr/bin/env ts-node

/**
 * Script de Configuration N8N
 * Guide interactif pour configurer N8N
 */

import * as readline from 'readline'
import { writeFileSync, readFileSync, existsSync } from 'fs'
import { join } from 'path'
import { createHmac, randomBytes } from 'crypto'

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
})

const colors = {
  reset: '\x1b[0m',
  green: '\x1b[32m',
  cyan: '\x1b[36m',
  yellow: '\x1b[33m',
  bold: '\x1b[1m',
}

function question(query: string): Promise<string> {
  return new Promise((resolve) => rl.question(query, resolve))
}

function log(message: string, color = colors.reset) {
  console.log(`${color}${message}${colors.reset}`)
}

async function testN8nConnectivity(url: string): Promise<boolean> {
  try {
    log(`\nüîç Test de connectivit√© vers ${url}...`, colors.cyan)
    
    const controller = new AbortController()
    const timeoutId = setTimeout(() => controller.abort(), 5000)
    
    const response = await fetch(url, {
      signal: controller.signal,
      method: 'GET',
    })
    
    clearTimeout(timeoutId)
    
    log('‚úì N8N accessible !', colors.green)
    return true
  } catch (error: any) {
    if (error.name === 'AbortError') {
      log('‚úó Timeout (5s) - N8N ne r√©pond pas', colors.yellow)
    } else {
      log(`‚úó Erreur: ${error.message}`, colors.yellow)
    }
    return false
  }
}

function generateSecret(): string {
  return randomBytes(32).toString('hex')
}

async function main() {
  console.clear()
  log('‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó', colors.cyan)
  log('‚ïë   ‚ö° CONFIGURATION N8N - Nuvoya8 SaaS Factory         ‚ïë', colors.cyan)
  log('‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù', colors.cyan)
  
  // 1. URL N8N
  log('\nüìç √âtape 1/4 : URL de votre N8N', colors.bold)
  log('Exemple: https://n8n.infra-nuvoya8.com ou http://localhost:5678\n')
  
  let n8nUrl = await question('URL de N8N (sans /webhook): ')
  n8nUrl = n8nUrl.trim().replace(/\/$/, '') // Enlever le / final
  
  if (!n8nUrl.startsWith('http')) {
    n8nUrl = 'https://' + n8nUrl
  }
  
  // Test de connectivit√©
  const isAccessible = await testN8nConnectivity(n8nUrl)
  
  if (!isAccessible) {
    log('\n‚ö†Ô∏è  N8N n\'est pas accessible pour le moment.', colors.yellow)
    const continueAnyway = await question('Continuer quand m√™me ? (o/n): ')
    if (continueAnyway.toLowerCase() !== 'o') {
      log('\nConfiguration annul√©e.', colors.yellow)
      rl.close()
      return
    }
  }
  
  // 2. Secret HMAC
  log('\nüîê √âtape 2/4 : Secret HMAC', colors.bold)
  log('Ce secret s√©curise les communications entre Next.js et N8N\n')
  
  const generateNew = await question('G√©n√©rer automatiquement un secret s√©curis√© ? (o/n): ')
  
  let secret: string
  if (generateNew.toLowerCase() === 'o') {
    secret = generateSecret()
    log(`\n‚úì Secret g√©n√©r√©: ${secret.substring(0, 20)}...`, colors.green)
  } else {
    secret = await question('Entrez votre secret HMAC: ')
    secret = secret.trim()
  }
  
  // 3. Nom de l'app
  log('\nüìù √âtape 3/4 : Nom de l\'application', colors.bold)
  const defaultName = 'Nuvoya8 Factory Test'
  const appName = (await question(`Nom de l'app (d√©faut: ${defaultName}): `)).trim() || defaultName
  
  // 4. V√©rification
  log('\nüìã √âtape 4/4 : R√©capitulatif', colors.bold)
  log('\nConfiguration qui sera enregistr√©e:')
  log(`  N8N_WEBHOOK_URL=${n8nUrl}/webhook`, colors.cyan)
  log(`  N8N_WEBHOOK_SECRET=${secret.substring(0, 20)}...`, colors.cyan)
  log(`  NEXT_PUBLIC_APP_NAME=${appName}`, colors.cyan)
  
  const confirm = await question('\nConfirmer et enregistrer ? (o/n): ')
  
  if (confirm.toLowerCase() !== 'o') {
    log('\nConfiguration annul√©e.', colors.yellow)
    rl.close()
    return
  }
  
  // 5. Enregistrer dans .env.local
  const envPath = join(process.cwd(), '.env.local')
  let envContent = ''
  
  if (existsSync(envPath)) {
    envContent = readFileSync(envPath, 'utf-8')
  }
  
  // Supprimer les anciennes valeurs si elles existent
  envContent = envContent
    .split('\n')
    .filter(line => 
      !line.startsWith('N8N_WEBHOOK_URL=') && 
      !line.startsWith('N8N_WEBHOOK_SECRET=') &&
      !line.startsWith('NEXT_PUBLIC_APP_NAME=')
    )
    .join('\n')
  
  // Ajouter les nouvelles valeurs
  envContent += `\n\n# N8N Configuration (ajout√© par setup-n8n.ts)\n`
  envContent += `N8N_WEBHOOK_URL=${n8nUrl}/webhook\n`
  envContent += `N8N_WEBHOOK_SECRET=${secret}\n`
  envContent += `NEXT_PUBLIC_APP_NAME=${appName}\n`
  
  writeFileSync(envPath, envContent)
  
  log('\n‚úì Configuration enregistr√©e dans .env.local', colors.green)
  
  // 6. G√©n√©rer l'export du workflow N8N
  log('\nüì¶ G√©n√©ration du workflow N8N...', colors.cyan)
  
  const workflow = {
    name: 'test-workflow',
    nodes: [
      {
        parameters: {
          httpMethod: 'POST',
          path: 'test-workflow',
          responseMode: 'responseNode',
          options: {}
        },
        id: '1',
        name: 'Webhook',
        type: 'n8n-nodes-base.webhook',
        typeVersion: 1.1,
        position: [250, 300],
        webhookId: crypto.randomUUID(),
      },
      {
        parameters: {
          functionCode: `const crypto = require('crypto');

// R√©cup√©rer les donn√©es
const body = $input.item.json;
const headers = $input.item.headers;
const signature = headers['x-signature'];

// Secret partag√©
const secret = '${secret}';

// Calculer la signature attendue
const expectedSignature = crypto
  .createHmac('sha256', secret)
  .update(JSON.stringify(body))
  .digest('hex');

// V√©rifier
if (signature !== expectedSignature) {
  throw new Error('Invalid signature - Unauthorized');
}

// V√©rifier app_id
const appId = body.metadata?.appId;
if (!appId) {
  throw new Error('Missing app_id');
}

// Tout est OK, passer les donn√©es
return $input.item;`
        },
        id: '2',
        name: 'V√©rifier Signature HMAC',
        type: 'n8n-nodes-base.function',
        typeVersion: 1,
        position: [450, 300],
      },
      {
        parameters: {
          functionCode: `const data = $input.item.json.data;
const metadata = $input.item.json.metadata;

return {
  json: {
    success: true,
    data: {
      message: 'üéâ Workflow ex√©cut√© avec succ√®s!',
      receivedMessage: data.message,
      timestamp: data.timestamp,
      appId: metadata.appId,
      userId: metadata.userId,
      processedAt: new Date().toISOString(),
      n8nVersion: 'test-workflow-v1'
    }
  }
};`
        },
        id: '3',
        name: 'Traiter la Requ√™te',
        type: 'n8n-nodes-base.function',
        typeVersion: 1,
        position: [650, 300],
      },
      {
        parameters: {
          respondWith: 'json',
          responseBody: '={{ $json }}',
        },
        id: '4',
        name: 'Respond to Webhook',
        type: 'n8n-nodes-base.respondToWebhook',
        typeVersion: 1,
        position: [850, 300],
      }
    ],
    connections: {
      'Webhook': {
        main: [[{ node: 'V√©rifier Signature HMAC', type: 'main', index: 0 }]]
      },
      'V√©rifier Signature HMAC': {
        main: [[{ node: 'Traiter la Requ√™te', type: 'main', index: 0 }]]
      },
      'Traiter la Requ√™te': {
        main: [[{ node: 'Respond to Webhook', type: 'main', index: 0 }]]
      }
    },
    active: false,
    settings: {
      executionOrder: 'v1'
    },
    versionId: crypto.randomUUID(),
    id: crypto.randomUUID(),
    meta: {
      instanceId: crypto.randomUUID()
    },
    tags: [{ name: 'Nuvoya8', id: crypto.randomUUID() }]
  }
  
  const workflowPath = join(process.cwd(), 'n8n-test-workflow.json')
  writeFileSync(workflowPath, JSON.stringify(workflow, null, 2))
  
  log(`‚úì Workflow export√©: ${workflowPath}`, colors.green)
  
  // 7. Instructions finales
  log('\n' + '‚ïê'.repeat(60), colors.cyan)
  log('üéØ PROCHAINES √âTAPES', colors.bold)
  log('‚ïê'.repeat(60), colors.cyan)
  
  log('\n1. Importer le workflow dans N8N:', colors.bold)
  log(`   - Ouvrir N8N: ${n8nUrl}`, colors.cyan)
  log(`   - Cliquer sur "Import from file"`)
  log(`   - S√©lectionner: n8n-test-workflow.json`)
  log(`   - Activer le workflow (toggle en haut √† droite)`)
  
  log('\n2. V√©rifier la configuration:', colors.bold)
  log('   npm run verify', colors.cyan)
  
  log('\n3. D√©marrer l\'application:', colors.bold)
  log('   npm run dev', colors.cyan)
  
  log('\n4. Tester le workflow:', colors.bold)
  log('   http://localhost:3000/app/n8n-test', colors.cyan)
  
  log('\n‚ú® Configuration termin√©e avec succ√®s!\n', colors.green)
  
  rl.close()
}

main()

